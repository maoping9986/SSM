<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">



<!--
        5.1、单个字面量类型的参数
              若mapper接口中的方法参数为单个的字面量类型
             此时可以使用${}和#{}以任意的名称获取参数的值，注意${}需要手动加单引号
        5.2、多个字面量类型的参数
            若mapper接口中的方法参数为多个时
            此时MyBatis会自动将这些参数放在一个map集合中，以arg0,arg1...为键，以参数为值；
            以param1,param2...为键，以参数为值；因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，
            注意${}需要手动加单引号
        5.3、map集合类型的参数
            若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在
             map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号
        5.4、实体类类型的参数
            若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号
        5.5、使用@Param标识参数可以通过@Param注解标识mapper接口中的方法参数
             此时，会将这些参数放在map集合中，以@Param注解的value属性值为键，以参数为值；以param1,param2...为键，以参数为值；只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号




-->
<mapper namespace="com.bcm.mapper.UserMapper">
<!--User getUserByUserName(String name);-->
    <select id="getUserByUserName" resultType="User">
        SELECT * FROM tb_user
        WHERE username = #{name}
    </select>
<!-- User CheckLogin(String name,String password);-->
    <select id="CheckLogin" resultType="User">
        SELECT * FROM tb_user
        WHERE username = #{arg0} and password = #{arg1}
    </select>
<!-- User CheckLoginByMap(Map<String,Object> map);-->
    <select id="CheckLoginByMap" resultType="User">
        SELECT * FROM tb_user
        WHERE username = #{username} and password = #{password}
    </select>
<!--int InsertUser(User user);-->
    <insert id="InsertUser">
        INSERT  into tb_user VALUES (null ,#{username},#{password},#{age},#{gender},#{email})
    </insert>
<!--     User CheckLoginParam(@Param("name") String username,@Param("password") String password);
-->
    <select id="CheckLoginParam" resultType="User">
        SELECT * FROM tb_user
        WHERE username = #{name} AND password = #{password}
    </select>
</mapper>
